//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectX.Language {
    
    
    public class translation_unit : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Optional(new declaration_seq());
        }
    }
    
    public class declaration_seq : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new declaration(), new ProjectX.Bnf.Sequence(new declaration_seq(), new declaration()));
        }
    }
    
    public class declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new block_declaration(), new function_definition(), new template_declaration(), new explicit_instantiation(), new explicit_specialization(), new linkage_specification(), new namespace_definition());
        }
    }
    
    public class block_declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new simple_declaration(), new asm_definition(), new namespace_alias_definition(), new using_declaration(), new using_directive());
        }
    }
    
    public class simple_declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new decl_specifier_seq()), new ProjectX.Bnf.Optional(new init_declarator_list()), new ProjectX.Bnf.Terminal(";"));
        }
    }
    
    public class decl_specifier_seq : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new decl_specifier_seq()), new decl_specifier());
        }
    }
    
    public class decl_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new storage_class_specifier(), new type_specifier(), new function_specifier(), new ProjectX.Bnf.Terminal("friend"), new ProjectX.Bnf.Terminal("typedef"));
        }
    }
    
    public class storage_class_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("auto"), new ProjectX.Bnf.Terminal("register"), new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Terminal("extern"), new ProjectX.Bnf.Terminal("mutable"));
        }
    }
    
    public class type_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new simple_type_specifier(), new class_specifier(), new enum_specifier(), new elaborated_type_specifier(), new cv_qualifier());
        }
    }
    
    public class simple_type_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new type_name()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new ProjectX.Bnf.Terminal("template"), new template_id()), new ProjectX.Bnf.Terminal("char"), new ProjectX.Bnf.Terminal("wchar_t"), new ProjectX.Bnf.Terminal("bool"), new ProjectX.Bnf.Terminal("short"), new ProjectX.Bnf.Terminal("int"), new ProjectX.Bnf.Terminal("long"), new ProjectX.Bnf.Terminal("signed"), new ProjectX.Bnf.Terminal("unsigned"), new ProjectX.Bnf.Terminal("float"), new ProjectX.Bnf.Terminal("double"), new ProjectX.Bnf.Terminal("void"));
        }
    }
    
    public class nested_name_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new class_or_namespace_name(), new ProjectX.Bnf.Terminal("::"), new ProjectX.Bnf.Optional(new nested_name_specifier())), new ProjectX.Bnf.Sequence(new class_or_namespace_name(), new ProjectX.Bnf.Terminal("::"), new ProjectX.Bnf.Terminal("template"), new nested_name_specifier()));
        }
    }
    
    public class class_or_namespace_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new class_name(), new namespace_name());
        }
    }
    
    public class class_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new identifier(), new template_id());
        }
    }
    
    public class template_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new template_name(), new ProjectX.Bnf.Terminal("<"), new ProjectX.Bnf.Optional(new template_argument_list()), new ProjectX.Bnf.Terminal(">"));
        }
    }
    
    public class template_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new identifier();
        }
    }
    
    public class template_argument_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new template_argument(), new ProjectX.Bnf.Sequence(new template_argument_list(), new ProjectX.Bnf.Terminal(","), new template_argument()));
        }
    }
    
    public class template_argument : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new assignment_expression(), new type_id(), new id_expression());
        }
    }
    
    public class assignment_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new conditional_expression(), new ProjectX.Bnf.Sequence(new logical_or_expression(), new assignment_operator(), new assignment_expression()), new throw_expression());
        }
    }
    
    public class conditional_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new logical_or_expression(), new ProjectX.Bnf.Sequence(new logical_or_expression(), new ProjectX.Bnf.Terminal("?"), new expression(), new ProjectX.Bnf.Terminal(":"), new assignment_expression()));
        }
    }
    
    public class logical_or_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new logical_and_expression(), new ProjectX.Bnf.Sequence(new logical_or_expression(), new ProjectX.Bnf.Terminal("||"), new logical_and_expression()));
        }
    }
    
    public class logical_and_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new inclusive_or_expression(), new ProjectX.Bnf.Sequence(new logical_and_expression(), new ProjectX.Bnf.Terminal("&&"), new inclusive_or_expression()));
        }
    }
    
    public class inclusive_or_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new exclusive_or_expression(), new ProjectX.Bnf.Sequence(new inclusive_or_expression(), new ProjectX.Bnf.Terminal("|"), new exclusive_or_expression()));
        }
    }
    
    public class exclusive_or_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new and_expression(), new ProjectX.Bnf.Sequence(new exclusive_or_expression(), new ProjectX.Bnf.Terminal("^"), new and_expression()));
        }
    }
    
    public class and_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new equality_expression(), new ProjectX.Bnf.Sequence(new and_expression(), new ProjectX.Bnf.Terminal("&"), new equality_expression()));
        }
    }
    
    public class equality_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new relational_expression(), new ProjectX.Bnf.Sequence(new equality_expression(), new ProjectX.Bnf.Terminal("=="), new relational_expression()), new ProjectX.Bnf.Sequence(new equality_expression(), new ProjectX.Bnf.Terminal("!="), new relational_expression()));
        }
    }
    
    public class relational_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new shift_expression(), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal("<"), new shift_expression()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal(">"), new shift_expression()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal("<="), new shift_expression()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal(">="), new shift_expression()));
        }
    }
    
    public class shift_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new additive_expression(), new ProjectX.Bnf.Sequence(new shift_expression(), new ProjectX.Bnf.Terminal("<<"), new additive_expression()), new ProjectX.Bnf.Sequence(new shift_expression(), new ProjectX.Bnf.Terminal(">>"), new additive_expression()));
        }
    }
    
    public class additive_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new multiplicative_expression(), new ProjectX.Bnf.Sequence(new additive_expression(), new ProjectX.Bnf.Terminal("+"), new multiplicative_expression()), new ProjectX.Bnf.Sequence(new additive_expression(), new ProjectX.Bnf.Terminal("-"), new multiplicative_expression()));
        }
    }
    
    public class multiplicative_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new pm_expression(), new ProjectX.Bnf.Sequence(new multiplicative_expression(), new ProjectX.Bnf.Terminal("*"), new pm_expression()), new ProjectX.Bnf.Sequence(new multiplicative_expression(), new ProjectX.Bnf.Terminal("/"), new pm_expression()), new ProjectX.Bnf.Sequence(new multiplicative_expression(), new ProjectX.Bnf.Terminal("%"), new pm_expression()));
        }
    }
    
    public class pm_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new cast_expression(), new ProjectX.Bnf.Sequence(new pm_expression(), new ProjectX.Bnf.Terminal(".*"), new cast_expression()), new ProjectX.Bnf.Sequence(new pm_expression(), new ProjectX.Bnf.Terminal("->*"), new cast_expression()));
        }
    }
    
    public class cast_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new unary_expression(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new type_id(), new ProjectX.Bnf.Terminal(")"), new cast_expression()));
        }
    }
    
    public class unary_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new postfix_expression(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("++"), new cast_expression()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("--"), new cast_expression()), new ProjectX.Bnf.Sequence(new unary_operator(), new cast_expression()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("sizeof"), new unary_expression()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("sizeof"), new ProjectX.Bnf.Terminal("("), new type_id(), new ProjectX.Bnf.Terminal(")")), new new_expression(), new delete_expression());
        }
    }
    
    public class postfix_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new primary_expression(), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("["), new expression(), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new expression_list()), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new simple_type_specifier(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new expression_list()), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typename"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new identifier(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new expression_list()), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typename"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("template")), new template_id(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new expression_list()), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("."), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("template")), new id_expression()), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("->"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("template")), new id_expression()), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("."), new pseudo_destructor_name()), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("->"), new pseudo_destructor_name()), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("++")), new ProjectX.Bnf.Sequence(new postfix_expression(), new ProjectX.Bnf.Terminal("--")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("dynamic_cast"), new ProjectX.Bnf.Terminal("<"), new type_id(), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("static_cast"), new ProjectX.Bnf.Terminal("<"), new type_id(), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("reinterpret_cast"), new ProjectX.Bnf.Terminal("<"), new type_id(), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("const_cast"), new ProjectX.Bnf.Terminal("<"), new type_id(), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typeid"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typeid"), new ProjectX.Bnf.Terminal("("), new type_id(), new ProjectX.Bnf.Terminal(")")));
        }
    }
    
    public class primary_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new literal(), new ProjectX.Bnf.Terminal("this"), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")")), new id_expression());
        }
    }
    
    public class expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new assignment_expression(), new ProjectX.Bnf.Sequence(new expression(), new ProjectX.Bnf.Terminal(","), new assignment_expression()));
        }
    }
    
    public class id_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new unqualified_id(), new qualified_id());
        }
    }
    
    public class unqualified_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new identifier(), new operator_function_id(), new conversion_function_id(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("~"), new class_name()), new template_id());
        }
    }
    
    public class operator_function_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("operator"), new @operator());
        }
    }
    
    public class @operator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("delete"), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("delete"), new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Terminal("+"), new ProjectX.Bnf.Terminal("-"), new ProjectX.Bnf.Terminal("*"), new ProjectX.Bnf.Terminal("/"), new ProjectX.Bnf.Terminal("%"), new ProjectX.Bnf.Terminal("^"), new ProjectX.Bnf.Terminal("&"), new ProjectX.Bnf.Terminal("|"), new ProjectX.Bnf.Terminal("~"), new ProjectX.Bnf.Terminal("!"), new ProjectX.Bnf.Terminal("="), new ProjectX.Bnf.Terminal("<"), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("+="), new ProjectX.Bnf.Terminal("-="), new ProjectX.Bnf.Terminal("*="), new ProjectX.Bnf.Terminal("/="), new ProjectX.Bnf.Terminal("%="), new ProjectX.Bnf.Terminal("^="), new ProjectX.Bnf.Terminal("&="), new ProjectX.Bnf.Terminal("|="), new ProjectX.Bnf.Terminal("<<"), new ProjectX.Bnf.Terminal(">>"), new ProjectX.Bnf.Terminal(">>="), new ProjectX.Bnf.Terminal("<<="), new ProjectX.Bnf.Terminal("=="), new ProjectX.Bnf.Terminal("!="), new ProjectX.Bnf.Terminal("<="), new ProjectX.Bnf.Terminal(">="), new ProjectX.Bnf.Terminal("&&"), new ProjectX.Bnf.Terminal("||"), new ProjectX.Bnf.Terminal("++"), new ProjectX.Bnf.Terminal("--"), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("->*"), new ProjectX.Bnf.Terminal("->"), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Terminal("]")));
        }
    }
    
    public class conversion_function_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("operator"), new conversion_type_id());
        }
    }
    
    public class conversion_type_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new type_specifier_seq(), new ProjectX.Bnf.Optional(new conversion_declarator()));
        }
    }
    
    public class type_specifier_seq : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new type_specifier(), new ProjectX.Bnf.Optional(new type_specifier_seq()));
        }
    }
    
    public class conversion_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ptr_operator(), new ProjectX.Bnf.Optional(new conversion_declarator()));
        }
    }
    
    public class ptr_operator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("*"), new ProjectX.Bnf.Optional(new cv_qualifier_seq())), new ProjectX.Bnf.Terminal("&"), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new ProjectX.Bnf.Terminal("*"), new ProjectX.Bnf.Optional(new cv_qualifier_seq())));
        }
    }
    
    public class cv_qualifier_seq : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new cv_qualifier(), new ProjectX.Bnf.Optional(new cv_qualifier_seq()));
        }
    }
    
    public class cv_qualifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("const"), new ProjectX.Bnf.Terminal("volatile"));
        }
    }
    
    public class qualified_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("template")), new unqualified_id()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("::"), new identifier()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("::"), new operator_function_id()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("::"), new template_id()));
        }
    }
    
    public class expression_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new assignment_expression(), new ProjectX.Bnf.Sequence(new expression_list(), new ProjectX.Bnf.Terminal(","), new assignment_expression()));
        }
    }
    
    public class pseudo_destructor_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new type_name(), new ProjectX.Bnf.Terminal("::"), new ProjectX.Bnf.Terminal("~"), new type_name()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new ProjectX.Bnf.Terminal("template"), new template_id(), new ProjectX.Bnf.Terminal("::"), new ProjectX.Bnf.Terminal("~"), new type_name()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new ProjectX.Bnf.Terminal("~"), new type_name()));
        }
    }
    
    public class type_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new class_name(), new enum_name(), new typedef_name());
        }
    }
    
    public class enum_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new identifier();
        }
    }
    
    public class typedef_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new identifier();
        }
    }
    
    public class type_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new type_specifier_seq(), new ProjectX.Bnf.Optional(new abstract_declarator()));
        }
    }
    
    public class abstract_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ptr_operator(), new ProjectX.Bnf.Optional(new abstract_declarator())), new direct_abstract_declarator());
        }
    }
    
    public class direct_abstract_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new direct_abstract_declarator()), new ProjectX.Bnf.Terminal("("), new parameter_declaration_clause(), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new cv_qualifier_seq()), new ProjectX.Bnf.Optional(new exception_specification())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new direct_abstract_declarator()), new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Optional(new constant_expression()), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new abstract_declarator(), new ProjectX.Bnf.Terminal(")")));
        }
    }
    
    public class parameter_declaration_clause : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new parameter_declaration_list()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("..."))), new ProjectX.Bnf.Sequence(new parameter_declaration_list(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("...")));
        }
    }
    
    public class parameter_declaration_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new parameter_declaration(), new ProjectX.Bnf.Sequence(new parameter_declaration_list(), new ProjectX.Bnf.Terminal(","), new parameter_declaration()));
        }
    }
    
    public class parameter_declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new decl_specifier_seq(), new declarator()), new ProjectX.Bnf.Sequence(new decl_specifier_seq(), new declarator(), new ProjectX.Bnf.Terminal("="), new assignment_expression()), new ProjectX.Bnf.Sequence(new decl_specifier_seq(), new ProjectX.Bnf.Optional(new abstract_declarator())), new ProjectX.Bnf.Sequence(new decl_specifier_seq(), new ProjectX.Bnf.Optional(new abstract_declarator()), new ProjectX.Bnf.Terminal("="), new assignment_expression()));
        }
    }
    
    public class declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new direct_declarator(), new ProjectX.Bnf.Sequence(new ptr_operator(), new declarator()));
        }
    }
    
    public class direct_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new declarator_id(), new ProjectX.Bnf.Sequence(new direct_declarator(), new ProjectX.Bnf.Terminal("("), new parameter_declaration_clause(), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new cv_qualifier_seq()), new ProjectX.Bnf.Optional(new exception_specification())), new ProjectX.Bnf.Sequence(new direct_declarator(), new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Optional(new constant_expression()), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new declarator(), new ProjectX.Bnf.Terminal(")")));
        }
    }
    
    public class declarator_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new id_expression(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new type_name()));
        }
    }
    
    public class exception_specification : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("throw"), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new type_id_list()), new ProjectX.Bnf.Terminal(")"));
        }
    }
    
    public class type_id_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new type_id(), new ProjectX.Bnf.Sequence(new type_id_list(), new ProjectX.Bnf.Terminal(","), new type_id()));
        }
    }
    
    public class constant_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new conditional_expression();
        }
    }
    
    public class unary_operator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("*"), new ProjectX.Bnf.Terminal("&"), new ProjectX.Bnf.Terminal("+"), new ProjectX.Bnf.Terminal("-"), new ProjectX.Bnf.Terminal("!"), new ProjectX.Bnf.Terminal("~"));
        }
    }
    
    public class new_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Optional(new new_placement()), new new_type_id(), new ProjectX.Bnf.Optional(new new_initializer())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Optional(new new_placement()), new ProjectX.Bnf.Terminal("("), new type_id(), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new new_initializer())));
        }
    }
    
    public class new_placement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new expression_list(), new ProjectX.Bnf.Terminal(")"));
        }
    }
    
    public class new_type_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new type_specifier_seq(), new ProjectX.Bnf.Optional(new new_declarator()));
        }
    }
    
    public class new_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ptr_operator(), new ProjectX.Bnf.Optional(new new_declarator())), new direct_new_declarator());
        }
    }
    
    public class direct_new_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("["), new expression(), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new direct_new_declarator(), new ProjectX.Bnf.Terminal("["), new constant_expression(), new ProjectX.Bnf.Terminal("]")));
        }
    }
    
    public class new_initializer : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new expression_list()), new ProjectX.Bnf.Terminal(")"));
        }
    }
    
    public class delete_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Terminal("delete"), new cast_expression()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Terminal("delete"), new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Terminal("]"), new cast_expression()));
        }
    }
    
    public class assignment_operator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("="), new ProjectX.Bnf.Terminal("*="), new ProjectX.Bnf.Terminal("/="), new ProjectX.Bnf.Terminal("%="), new ProjectX.Bnf.Terminal("+="), new ProjectX.Bnf.Terminal("-="), new ProjectX.Bnf.Terminal(">>="), new ProjectX.Bnf.Terminal("<<="), new ProjectX.Bnf.Terminal("&="), new ProjectX.Bnf.Terminal("^="), new ProjectX.Bnf.Terminal("|="));
        }
    }
    
    public class throw_expression : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("throw"), new ProjectX.Bnf.Optional(new assignment_expression()));
        }
    }
    
    public class namespace_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new original_namespace_name(), new namespace_alias());
        }
    }
    
    public class original_namespace_name : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new identifier();
        }
    }
    
    public class namespace_alias : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new identifier();
        }
    }
    
    public class class_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new class_head(), new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new member_specification()), new ProjectX.Bnf.Terminal("}"));
        }
    }
    
    public class class_head : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new class_key(), new ProjectX.Bnf.Optional(new identifier()), new ProjectX.Bnf.Optional(new base_clause())), new ProjectX.Bnf.Sequence(new class_key(), new nested_name_specifier(), new identifier(), new ProjectX.Bnf.Optional(new base_clause())), new ProjectX.Bnf.Sequence(new class_key(), new ProjectX.Bnf.Optional(new nested_name_specifier()), new template_id(), new ProjectX.Bnf.Optional(new base_clause())));
        }
    }
    
    public class class_key : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("class"), new ProjectX.Bnf.Terminal("struct"), new ProjectX.Bnf.Terminal("union"));
        }
    }
    
    public class base_clause : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new base_specifier_list());
        }
    }
    
    public class base_specifier_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new base_specifier(), new ProjectX.Bnf.Sequence(new base_specifier_list(), new ProjectX.Bnf.Terminal(","), new base_specifier()));
        }
    }
    
    public class base_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new class_name()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("virtual"), new ProjectX.Bnf.Optional(new access_specifier()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new class_name()), new ProjectX.Bnf.Sequence(new access_specifier(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("virtual")), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new class_name()));
        }
    }
    
    public class access_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("public"));
        }
    }
    
    public class member_specification : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new member_declaration(), new ProjectX.Bnf.Optional(new member_specification())), new ProjectX.Bnf.Sequence(new access_specifier(), new ProjectX.Bnf.Terminal(":"), new ProjectX.Bnf.Optional(new member_specification())));
        }
    }
    
    public class member_declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new decl_specifier_seq()), new ProjectX.Bnf.Optional(new member_declarator_list()), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new function_definition(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal(";"))), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("template")), new unqualified_id(), new ProjectX.Bnf.Terminal(";")), new using_declaration(), new template_declaration());
        }
    }
    
    public class member_declarator_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new member_declarator(), new ProjectX.Bnf.Sequence(new member_declarator_list(), new ProjectX.Bnf.Terminal(","), new member_declarator()));
        }
    }
    
    public class member_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new declarator(), new ProjectX.Bnf.Optional(new pure_specifier())), new ProjectX.Bnf.Sequence(new declarator(), new ProjectX.Bnf.Optional(new constant_initializer())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new identifier()), new ProjectX.Bnf.Terminal(":"), new constant_expression()));
        }
    }
    
    public class pure_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("="), new ProjectX.Bnf.Terminal("0"));
        }
    }
    
    public class constant_initializer : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("="), new constant_expression());
        }
    }
    
    public class function_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new decl_specifier_seq()), new declarator(), new ProjectX.Bnf.Optional(new ctor_initializer()), new function_body()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new decl_specifier_seq()), new declarator(), new function_try_block()));
        }
    }
    
    public class ctor_initializer : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new mem_initializer_list());
        }
    }
    
    public class mem_initializer_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new mem_initializer(), new ProjectX.Bnf.Sequence(new mem_initializer(), new ProjectX.Bnf.Terminal(","), new mem_initializer_list()));
        }
    }
    
    public class mem_initializer : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new mem_initializer_id(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new expression_list()), new ProjectX.Bnf.Terminal(")"));
        }
    }
    
    public class mem_initializer_id : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new class_name()), new identifier());
        }
    }
    
    public class function_body : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new compound_statement();
        }
    }
    
    public class compound_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new statement_seq()), new ProjectX.Bnf.Terminal("}"));
        }
    }
    
    public class statement_seq : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new statement(), new ProjectX.Bnf.Sequence(new statement_seq(), new statement()));
        }
    }
    
    public class statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new labeled_statement(), new expression_statement(), new compound_statement(), new selection_statement(), new iteration_statement(), new jump_statement(), new declaration_statement(), new try_block());
        }
    }
    
    public class labeled_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal(":"), new statement()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("case"), new constant_expression(), new ProjectX.Bnf.Terminal(":"), new statement()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("default"), new ProjectX.Bnf.Terminal(":"), new statement()));
        }
    }
    
    public class expression_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new expression()), new ProjectX.Bnf.Terminal(";"));
        }
    }
    
    public class selection_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("if"), new ProjectX.Bnf.Terminal("("), new condition(), new ProjectX.Bnf.Terminal(")"), new statement()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("if"), new ProjectX.Bnf.Terminal("("), new condition(), new ProjectX.Bnf.Terminal(")"), new statement(), new ProjectX.Bnf.Terminal("else"), new statement()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("switch"), new ProjectX.Bnf.Terminal("("), new condition(), new ProjectX.Bnf.Terminal(")"), new statement()));
        }
    }
    
    public class condition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new expression(), new ProjectX.Bnf.Sequence(new type_specifier_seq(), new declarator(), new ProjectX.Bnf.Terminal("="), new assignment_expression()));
        }
    }
    
    public class iteration_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("while"), new ProjectX.Bnf.Terminal("("), new condition(), new ProjectX.Bnf.Terminal(")"), new statement()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("do"), new statement(), new ProjectX.Bnf.Terminal("while"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("for"), new ProjectX.Bnf.Terminal("("), new for_init_statement(), new ProjectX.Bnf.Optional(new condition()), new ProjectX.Bnf.Terminal(";"), new ProjectX.Bnf.Optional(new expression()), new ProjectX.Bnf.Terminal(")"), new statement()));
        }
    }
    
    public class for_init_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new expression_statement(), new simple_declaration());
        }
    }
    
    public class jump_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("break"), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("continue"), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("return"), new ProjectX.Bnf.Optional(new expression()), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("goto"), new identifier(), new ProjectX.Bnf.Terminal(";")));
        }
    }
    
    public class declaration_statement : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new block_declaration();
        }
    }
    
    public class try_block : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("try"), new compound_statement(), new handler_seq());
        }
    }
    
    public class handler_seq : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new handler(), new ProjectX.Bnf.Optional(new handler_seq()));
        }
    }
    
    public class handler : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("catch"), new ProjectX.Bnf.Terminal("("), new exception_declaration(), new ProjectX.Bnf.Terminal(")"), new compound_statement());
        }
    }
    
    public class exception_declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new type_specifier_seq(), new declarator()), new ProjectX.Bnf.Sequence(new type_specifier_seq(), new abstract_declarator()), new type_specifier_seq(), new ProjectX.Bnf.Terminal("..."));
        }
    }
    
    public class function_try_block : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("try"), new ProjectX.Bnf.Optional(new ctor_initializer()), new function_body(), new handler_seq());
        }
    }
    
    public class using_declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("using"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("typename")), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new unqualified_id(), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("using"), new ProjectX.Bnf.Terminal("::"), new unqualified_id(), new ProjectX.Bnf.Terminal(";")));
        }
    }
    
    public class template_declaration : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("export")), new ProjectX.Bnf.Terminal("template"), new ProjectX.Bnf.Terminal("<"), new template_parameter_list(), new ProjectX.Bnf.Terminal(">"), new declaration());
        }
    }
    
    public class template_parameter_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new template_parameter(), new ProjectX.Bnf.Sequence(new template_parameter_list(), new ProjectX.Bnf.Terminal(","), new template_parameter()));
        }
    }
    
    public class template_parameter : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new type_parameter(), new parameter_declaration());
        }
    }
    
    public class type_parameter : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("class"), new ProjectX.Bnf.Optional(new identifier())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("class"), new ProjectX.Bnf.Optional(new identifier()), new ProjectX.Bnf.Terminal("="), new type_id()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typename"), new ProjectX.Bnf.Optional(new identifier())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typename"), new ProjectX.Bnf.Optional(new identifier()), new ProjectX.Bnf.Terminal("="), new type_id()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("template"), new ProjectX.Bnf.Terminal("<"), new template_parameter_list(), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("class"), new ProjectX.Bnf.Optional(new identifier())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("template"), new ProjectX.Bnf.Terminal("<"), new template_parameter_list(), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("class"), new ProjectX.Bnf.Optional(new identifier()), new ProjectX.Bnf.Terminal("="), new id_expression()));
        }
    }
    
    public class enum_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("enum"), new ProjectX.Bnf.Optional(new identifier()), new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new enumerator_list()), new ProjectX.Bnf.Terminal("}"));
        }
    }
    
    public class enumerator_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new enumerator_definition(), new ProjectX.Bnf.Sequence(new enumerator_list(), new ProjectX.Bnf.Terminal(","), new enumerator_definition()));
        }
    }
    
    public class enumerator_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new enumerator(), new ProjectX.Bnf.Sequence(new enumerator(), new ProjectX.Bnf.Terminal("="), new constant_expression()));
        }
    }
    
    public class enumerator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new identifier();
        }
    }
    
    public class elaborated_type_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new class_key(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new identifier()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("enum"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new identifier()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typename"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new identifier()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typename"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new nested_name_specifier(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("template")), new template_id()));
        }
    }
    
    public class function_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("inline"), new ProjectX.Bnf.Terminal("virtual"), new ProjectX.Bnf.Terminal("explicit"));
        }
    }
    
    public class init_declarator_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new init_declarator(), new ProjectX.Bnf.Sequence(new init_declarator_list(), new ProjectX.Bnf.Terminal(","), new init_declarator()));
        }
    }
    
    public class init_declarator : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new declarator(), new ProjectX.Bnf.Optional(new initializer()));
        }
    }
    
    public class initializer : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("="), new initializer_clause()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new expression_list(), new ProjectX.Bnf.Terminal(")")));
        }
    }
    
    public class initializer_clause : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new assignment_expression(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new initializer_list(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal(",")), new ProjectX.Bnf.Terminal("}")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Terminal("}")));
        }
    }
    
    public class initializer_list : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new initializer_clause(), new ProjectX.Bnf.Sequence(new initializer_list(), new ProjectX.Bnf.Terminal(","), new initializer_clause()));
        }
    }
    
    public class asm_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("asm"), new ProjectX.Bnf.Terminal("("), new string_literal(), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Terminal(";"));
        }
    }
    
    public class namespace_alias_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("namespace"), new identifier(), new ProjectX.Bnf.Terminal("="), new qualified_namespace_specifier(), new ProjectX.Bnf.Terminal(";"));
        }
    }
    
    public class qualified_namespace_specifier : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new namespace_name());
        }
    }
    
    public class using_directive : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("using"), new ProjectX.Bnf.Terminal("namespace"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("::")), new ProjectX.Bnf.Optional(new nested_name_specifier()), new namespace_name(), new ProjectX.Bnf.Terminal(";"));
        }
    }
    
    public class explicit_instantiation : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("template"), new declaration());
        }
    }
    
    public class explicit_specialization : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("template"), new ProjectX.Bnf.Terminal("<"), new ProjectX.Bnf.Terminal(">"), new declaration());
        }
    }
    
    public class linkage_specification : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("extern"), new string_literal(), new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new declaration_seq()), new ProjectX.Bnf.Terminal("}")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("extern"), new string_literal(), new declaration()));
        }
    }
    
    public class namespace_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new named_namespace_definition(), new unnamed_namespace_definition());
        }
    }
    
    public class named_namespace_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Choice(new original_namespace_definition(), new extension_namespace_definition());
        }
    }
    
    public class original_namespace_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("namespace"), new identifier(), new ProjectX.Bnf.Terminal("{"), new namespace_body(), new ProjectX.Bnf.Terminal("}"));
        }
    }
    
    public class namespace_body : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Optional(new declaration_seq());
        }
    }
    
    public class extension_namespace_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("namespace"), new original_namespace_name(), new ProjectX.Bnf.Terminal("{"), new namespace_body(), new ProjectX.Bnf.Terminal("}"));
        }
    }
    
    public class unnamed_namespace_definition : ProjectX.Bnf.Nonterminal {
        
        public override void SetProduction() {
            Production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("namespace"), new ProjectX.Bnf.Terminal("{"), new namespace_body(), new ProjectX.Bnf.Terminal("}"));
        }
    }
}
