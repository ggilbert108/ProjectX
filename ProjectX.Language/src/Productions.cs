//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectX.Language {
    using ProjectX.Bnf;
    
    
    public class namespace_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new namespace_or_type_name();
            return production;
        }
    }
    
    public class type_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new namespace_or_type_name();
            return production;
        }
    }
    
    public class namespace_or_type_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Optional(new type_argument_list())), new ProjectX.Bnf.Sequence(new namespace_or_type_name(), new ProjectX.Bnf.Terminal("."), new identifier(), new ProjectX.Bnf.Optional(new type_argument_list())), new qualified_alias_member());
            return production;
        }
    }
    
    public class type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new value_type(), new reference_type(), new type_parameter());
            return production;
        }
    }
    
    public class value_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new struct_type(), new enum_type());
            return production;
        }
    }
    
    public class struct_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new type_name(), new simple_type(), new nullable_type());
            return production;
        }
    }
    
    public class simple_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new numeric_type(), new ProjectX.Bnf.Terminal("bool"));
            return production;
        }
    }
    
    public class numeric_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new integral_type(), new floating_point_type(), new ProjectX.Bnf.Terminal("decimal"));
            return production;
        }
    }
    
    public class integral_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("sbyte"), new ProjectX.Bnf.Terminal("byte"), new ProjectX.Bnf.Terminal("short"), new ProjectX.Bnf.Terminal("ushort"), new ProjectX.Bnf.Terminal("int"), new ProjectX.Bnf.Terminal("uint"), new ProjectX.Bnf.Terminal("long"), new ProjectX.Bnf.Terminal("ulong"), new ProjectX.Bnf.Terminal("char"));
            return production;
        }
    }
    
    public class floating_point_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("float"), new ProjectX.Bnf.Terminal("double"));
            return production;
        }
    }
    
    public class nullable_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new non_nullable_value_type(), new ProjectX.Bnf.Terminal("?"));
            return production;
        }
    }
    
    public class non_nullable_value_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new type();
            return production;
        }
    }
    
    public class enum_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new type_name();
            return production;
        }
    }
    
    public class reference_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new class_type(), new interface_type(), new array_type(), new delegate_type());
            return production;
        }
    }
    
    public class class_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new type_name(), new ProjectX.Bnf.Terminal("object"), new ProjectX.Bnf.Terminal("dynamic"), new ProjectX.Bnf.Terminal("string"));
            return production;
        }
    }
    
    public class interface_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new type_name();
            return production;
        }
    }
    
    public class rank_specifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new rank_specifier(), new ProjectX.Bnf.Sequence(new rank_specifiers(), new rank_specifier()));
            return production;
        }
    }
    
    public class rank_specifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Optional(new dim_separators()), new ProjectX.Bnf.Terminal("]"));
            return production;
        }
    }
    
    public class dim_separators : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Sequence(new dim_separators(), new ProjectX.Bnf.Terminal(",")));
            return production;
        }
    }
    
    public class delegate_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new type_name();
            return production;
        }
    }
    
    public class type_argument_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("<"), new type_arguments(), new ProjectX.Bnf.Terminal(">"));
            return production;
        }
    }
    
    public class type_arguments : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new type_argument(), new ProjectX.Bnf.Sequence(new type_arguments(), new ProjectX.Bnf.Terminal(","), new type_argument()));
            return production;
        }
    }
    
    public class type_argument : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new type();
            return production;
        }
    }
    
    public class type_parameter : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new identifier();
            return production;
        }
    }
    
    public class variable_reference : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new expression();
            return production;
        }
    }
    
    public class argument_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new argument(), new ProjectX.Bnf.Sequence(new argument_list(), new ProjectX.Bnf.Terminal(","), new argument()));
            return production;
        }
    }
    
    public class argument : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new argument_name()), new argument_value());
            return production;
        }
    }
    
    public class argument_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal(":"));
            return production;
        }
    }
    
    public class argument_value : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new expression(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("ref"), new variable_reference()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("out"), new variable_reference()));
            return production;
        }
    }
    
    public class primary_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new primary_no_array_creation_expression(), new array_creation_expression());
            return production;
        }
    }
    
    public class primary_no_array_creation_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new literal(), new simple_name(), new parenthesized_expression(), new member_access(), new invocation_expression(), new element_access(), new this_access(), new base_access(), new post_increment_expression(), new post_decrement_expression(), new object_creation_expression(), new delegate_creation_expression(), new anonymous_object_creation_expression(), new typeof_expression(), new checked_expression(), new unchecked_expression(), new default_value_expression(), new anonymous_method_expression());
            return production;
        }
    }
    
    public class simple_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Optional(new type_argument_list()));
            return production;
        }
    }
    
    public class parenthesized_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class member_access : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new primary_expression(), new ProjectX.Bnf.Terminal("."), new identifier(), new ProjectX.Bnf.Optional(new type_argument_list())), new ProjectX.Bnf.Sequence(new predefined_type(), new ProjectX.Bnf.Terminal("."), new identifier(), new ProjectX.Bnf.Optional(new type_argument_list())), new ProjectX.Bnf.Sequence(new qualified_alias_member(), new ProjectX.Bnf.Terminal("."), new identifier()));
            return production;
        }
    }
    
    public class predefined_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("bool"), new ProjectX.Bnf.Terminal("byte"), new ProjectX.Bnf.Terminal("char"), new ProjectX.Bnf.Terminal("decimal"), new ProjectX.Bnf.Terminal("double"), new ProjectX.Bnf.Terminal("float"), new ProjectX.Bnf.Terminal("int"), new ProjectX.Bnf.Terminal("long"), new ProjectX.Bnf.Terminal("object"), new ProjectX.Bnf.Terminal("sbyte"), new ProjectX.Bnf.Terminal("short"), new ProjectX.Bnf.Terminal("string"), new ProjectX.Bnf.Terminal("uint"), new ProjectX.Bnf.Terminal("ulong"), new ProjectX.Bnf.Terminal("ushort"));
            return production;
        }
    }
    
    public class invocation_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new primary_expression(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new argument_list()), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class element_access : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new primary_no_array_creation_expression(), new ProjectX.Bnf.Terminal("["), new argument_list(), new ProjectX.Bnf.Terminal("]"));
            return production;
        }
    }
    
    public class this_access : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Terminal("this");
            return production;
        }
    }
    
    public class base_access : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("base"), new ProjectX.Bnf.Terminal("."), new identifier()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("base"), new ProjectX.Bnf.Terminal("["), new argument_list(), new ProjectX.Bnf.Terminal("]")));
            return production;
        }
    }
    
    public class post_increment_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new primary_expression(), new ProjectX.Bnf.Terminal("++"));
            return production;
        }
    }
    
    public class post_decrement_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new primary_expression(), new ProjectX.Bnf.Terminal("__"));
            return production;
        }
    }
    
    public class object_creation_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new type(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new argument_list()), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new object_or_collection_initializer())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new type(), new object_or_collection_initializer()));
            return production;
        }
    }
    
    public class object_or_collection_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new object_initializer(), new collection_initializer());
            return production;
        }
    }
    
    public class object_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new member_initializer_list()), new ProjectX.Bnf.Terminal("}")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new member_initializer_list(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("}")));
            return production;
        }
    }
    
    public class member_initializer_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new member_initializer(), new ProjectX.Bnf.Sequence(new member_initializer_list(), new ProjectX.Bnf.Terminal(","), new member_initializer()));
            return production;
        }
    }
    
    public class member_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("="), new initializer_value());
            return production;
        }
    }
    
    public class initializer_value : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new expression(), new object_or_collection_initializer());
            return production;
        }
    }
    
    public class collection_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new element_initializer_list(), new ProjectX.Bnf.Terminal("}")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new element_initializer_list(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("}")));
            return production;
        }
    }
    
    public class element_initializer_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new element_initializer(), new ProjectX.Bnf.Sequence(new element_initializer_list(), new ProjectX.Bnf.Terminal(","), new element_initializer()));
            return production;
        }
    }
    
    public class element_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new non_assignment_expression(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new expression_list(), new ProjectX.Bnf.Terminal("}")));
            return production;
        }
    }
    
    public class expression_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new expression(), new ProjectX.Bnf.Sequence(new expression_list(), new ProjectX.Bnf.Terminal(","), new expression()));
            return production;
        }
    }
    
    public class array_creation_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new non_array_type(), new ProjectX.Bnf.Terminal("["), new expression_list(), new ProjectX.Bnf.Terminal("]"), new ProjectX.Bnf.Optional(new rank_specifiers()), new ProjectX.Bnf.Optional(new array_initializer())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new array_type(), new array_initializer()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new rank_specifier(), new array_initializer()));
            return production;
        }
    }
    
    public class delegate_creation_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new delegate_type(), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class anonymous_object_creation_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new anonymous_object_initializer());
            return production;
        }
    }
    
    public class anonymous_object_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new member_declarator_list()), new ProjectX.Bnf.Terminal("}")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new member_declarator_list(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("}")));
            return production;
        }
    }
    
    public class member_declarator_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new member_declarator(), new ProjectX.Bnf.Sequence(new member_declarator_list(), new ProjectX.Bnf.Terminal(","), new member_declarator()));
            return production;
        }
    }
    
    public class member_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new simple_name(), new member_access(), new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("="), new expression()));
            return production;
        }
    }
    
    public class typeof_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typeof"), new ProjectX.Bnf.Terminal("("), new type(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typeof"), new ProjectX.Bnf.Terminal("("), new unbound_type_name(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("typeof"), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Terminal("void"), new ProjectX.Bnf.Terminal(")")));
            return production;
        }
    }
    
    public class unbound_type_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Optional(new generic_dimension_specifier())), new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("::"), new identifier(), new ProjectX.Bnf.Optional(new generic_dimension_specifier())), new ProjectX.Bnf.Sequence(new unbound_type_name(), new ProjectX.Bnf.Terminal("."), new identifier(), new ProjectX.Bnf.Optional(new generic_dimension_specifier())));
            return production;
        }
    }
    
    public class generic_dimension_specifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("<"), new ProjectX.Bnf.Optional(new commas()), new ProjectX.Bnf.Terminal(">"));
            return production;
        }
    }
    
    public class commas : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Sequence(new commas(), new ProjectX.Bnf.Terminal(",")));
            return production;
        }
    }
    
    public class checked_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("checked"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class unchecked_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("unchecked"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class default_value_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("default"), new ProjectX.Bnf.Terminal("("), new type(), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class unary_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new primary_expression(), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("+"), new unary_expression()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("_"), new unary_expression()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("!"), new unary_expression()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("~"), new unary_expression()), new pre_increment_expression(), new pre_decrement_expression(), new cast_expression());
            return production;
        }
    }
    
    public class pre_increment_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("++"), new unary_expression());
            return production;
        }
    }
    
    public class pre_decrement_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("__"), new unary_expression());
            return production;
        }
    }
    
    public class cast_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new type(), new ProjectX.Bnf.Terminal(")"), new unary_expression());
            return production;
        }
    }
    
    public class multiplicative_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new unary_expression(), new ProjectX.Bnf.Sequence(new multiplicative_expression(), new ProjectX.Bnf.Terminal("*"), new unary_expression()), new ProjectX.Bnf.Sequence(new multiplicative_expression(), new ProjectX.Bnf.Terminal("/"), new unary_expression()), new ProjectX.Bnf.Sequence(new multiplicative_expression(), new ProjectX.Bnf.Terminal("%"), new unary_expression()));
            return production;
        }
    }
    
    public class additive_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new multiplicative_expression(), new ProjectX.Bnf.Sequence(new additive_expression(), new ProjectX.Bnf.Terminal("+"), new multiplicative_expression()), new ProjectX.Bnf.Sequence(new additive_expression(), new ProjectX.Bnf.Terminal("_"), new multiplicative_expression()));
            return production;
        }
    }
    
    public class shift_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new additive_expression(), new ProjectX.Bnf.Sequence(new shift_expression(), new ProjectX.Bnf.Terminal("<<"), new additive_expression()), new ProjectX.Bnf.Sequence(new shift_expression(), new right_shift(), new additive_expression()));
            return production;
        }
    }
    
    public class relational_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new shift_expression(), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal("<"), new shift_expression()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal(">"), new shift_expression()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal("<="), new shift_expression()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal(">="), new shift_expression()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal("is"), new type()), new ProjectX.Bnf.Sequence(new relational_expression(), new ProjectX.Bnf.Terminal("as"), new type()));
            return production;
        }
    }
    
    public class equality_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new relational_expression(), new ProjectX.Bnf.Sequence(new equality_expression(), new ProjectX.Bnf.Terminal("=="), new relational_expression()), new ProjectX.Bnf.Sequence(new equality_expression(), new ProjectX.Bnf.Terminal("!="), new relational_expression()));
            return production;
        }
    }
    
    public class and_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new equality_expression(), new ProjectX.Bnf.Sequence(new and_expression(), new ProjectX.Bnf.Terminal("&"), new equality_expression()));
            return production;
        }
    }
    
    public class exclusive_or_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new and_expression(), new ProjectX.Bnf.Sequence(new exclusive_or_expression(), new ProjectX.Bnf.Terminal("^"), new and_expression()));
            return production;
        }
    }
    
    public class inclusive_or_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new exclusive_or_expression(), new ProjectX.Bnf.Sequence(new inclusive_or_expression(), new ProjectX.Bnf.Terminal("|"), new exclusive_or_expression()));
            return production;
        }
    }
    
    public class conditional_and_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new inclusive_or_expression(), new ProjectX.Bnf.Sequence(new conditional_and_expression(), new ProjectX.Bnf.Terminal("&&"), new inclusive_or_expression()));
            return production;
        }
    }
    
    public class conditional_or_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new conditional_and_expression(), new ProjectX.Bnf.Sequence(new conditional_or_expression(), new ProjectX.Bnf.Terminal("||"), new conditional_and_expression()));
            return production;
        }
    }
    
    public class null_coalescing_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new conditional_or_expression(), new ProjectX.Bnf.Sequence(new conditional_or_expression(), new ProjectX.Bnf.Terminal("??"), new null_coalescing_expression()));
            return production;
        }
    }
    
    public class conditional_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new null_coalescing_expression(), new ProjectX.Bnf.Sequence(new null_coalescing_expression(), new ProjectX.Bnf.Terminal("?"), new expression(), new ProjectX.Bnf.Terminal(":"), new expression()));
            return production;
        }
    }
    
    public class lambda_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new anonymous_function_signature(), new ProjectX.Bnf.Terminal("=>"), new anonymous_function_body());
            return production;
        }
    }
    
    public class anonymous_method_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("delegate"), new ProjectX.Bnf.Optional(new explicit_anonymous_function_signature()), new block());
            return production;
        }
    }
    
    public class anonymous_function_signature : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new explicit_anonymous_function_signature(), new implicit_anonymous_function_signature());
            return production;
        }
    }
    
    public class explicit_anonymous_function_signature : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new explicit_anonymous_function_parameter_list()), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class explicit_anonymous_function_parameter_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new explicit_anonymous_function_parameter(), new ProjectX.Bnf.Sequence(new explicit_anonymous_function_parameter_list(), new ProjectX.Bnf.Terminal(","), new explicit_anonymous_function_parameter()));
            return production;
        }
    }
    
    public class explicit_anonymous_function_parameter : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new anonymous_function_parameter_modifier()), new type(), new identifier());
            return production;
        }
    }
    
    public class anonymous_function_parameter_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("ref"), new ProjectX.Bnf.Terminal("out"));
            return production;
        }
    }
    
    public class implicit_anonymous_function_signature : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new implicit_anonymous_function_parameter_list()), new ProjectX.Bnf.Terminal(")")), new implicit_anonymous_function_parameter());
            return production;
        }
    }
    
    public class implicit_anonymous_function_parameter_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new implicit_anonymous_function_parameter(), new ProjectX.Bnf.Sequence(new implicit_anonymous_function_parameter_list(), new ProjectX.Bnf.Terminal(","), new implicit_anonymous_function_parameter()));
            return production;
        }
    }
    
    public class implicit_anonymous_function_parameter : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new identifier();
            return production;
        }
    }
    
    public class anonymous_function_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new expression(), new block());
            return production;
        }
    }
    
    public class query_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new from_clause(), new query_body());
            return production;
        }
    }
    
    public class from_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("from"), new ProjectX.Bnf.Optional(new type()), new identifier(), new ProjectX.Bnf.Terminal("in"), new expression());
            return production;
        }
    }
    
    public class query_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new query_body_clauses()), new select_or_group_clause(), new ProjectX.Bnf.Optional(new query_continuation()));
            return production;
        }
    }
    
    public class query_body_clauses : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new query_body_clause(), new ProjectX.Bnf.Sequence(new query_body_clauses(), new query_body_clause()));
            return production;
        }
    }
    
    public class query_body_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new from_clause(), new let_clause(), new where_clause(), new join_clause(), new join_into_clause(), new orderby_clause());
            return production;
        }
    }
    
    public class let_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("let"), new identifier(), new ProjectX.Bnf.Terminal("="), new expression());
            return production;
        }
    }
    
    public class where_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("where"), new boolean_expression());
            return production;
        }
    }
    
    public class join_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("join"), new ProjectX.Bnf.Optional(new type()), new identifier(), new ProjectX.Bnf.Terminal("in"), new expression(), new ProjectX.Bnf.Terminal("on"), new expression(), new ProjectX.Bnf.Terminal("equals"), new expression());
            return production;
        }
    }
    
    public class join_into_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("join"), new ProjectX.Bnf.Optional(new type()), new identifier(), new ProjectX.Bnf.Terminal("in"), new expression(), new ProjectX.Bnf.Terminal("on"), new expression(), new ProjectX.Bnf.Terminal("equals"), new expression(), new ProjectX.Bnf.Terminal("into"), new identifier());
            return production;
        }
    }
    
    public class orderby_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("orderby"), new orderings());
            return production;
        }
    }
    
    public class orderings : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ordering(), new ProjectX.Bnf.Sequence(new orderings(), new ProjectX.Bnf.Terminal(","), new ordering()));
            return production;
        }
    }
    
    public class ordering : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new expression(), new ProjectX.Bnf.Optional(new ordering_direction()));
            return production;
        }
    }
    
    public class ordering_direction : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("ascending"), new ProjectX.Bnf.Terminal("descending"));
            return production;
        }
    }
    
    public class select_or_group_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new select_clause(), new group_clause());
            return production;
        }
    }
    
    public class select_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("select"), new expression());
            return production;
        }
    }
    
    public class group_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("group"), new expression(), new ProjectX.Bnf.Terminal("by"), new expression());
            return production;
        }
    }
    
    public class query_continuation : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("into"), new identifier(), new query_body());
            return production;
        }
    }
    
    public class assignment : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new unary_expression(), new assignment_operator(), new expression());
            return production;
        }
    }
    
    public class assignment_operator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("="), new ProjectX.Bnf.Terminal("+="), new ProjectX.Bnf.Terminal("_="), new ProjectX.Bnf.Terminal("*="), new ProjectX.Bnf.Terminal("/="), new ProjectX.Bnf.Terminal("%="), new ProjectX.Bnf.Terminal("&="), new ProjectX.Bnf.Terminal("|="), new ProjectX.Bnf.Terminal("^="), new ProjectX.Bnf.Terminal("<<="), new right_shift_assignment());
            return production;
        }
    }
    
    public class expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new non_assignment_expression(), new assignment());
            return production;
        }
    }
    
    public class non_assignment_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new conditional_expression(), new lambda_expression(), new query_expression());
            return production;
        }
    }
    
    public class constant_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new expression();
            return production;
        }
    }
    
    public class boolean_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new expression();
            return production;
        }
    }
    
    public class statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new labeled_statement(), new declaration_statement(), new embedded_statement());
            return production;
        }
    }
    
    public class embedded_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new block(), new empty_statement(), new expression_statement(), new selection_statement(), new iteration_statement(), new jump_statement(), new try_statement(), new checked_statement(), new unchecked_statement(), new lock_statement(), new using_statement(), new yield_statement());
            return production;
        }
    }
    
    public class block : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new statement_list()), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class statement_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new statement(), new ProjectX.Bnf.Sequence(new statement_list(), new statement()));
            return production;
        }
    }
    
    public class empty_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Terminal(";");
            return production;
        }
    }
    
    public class labeled_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal(":"), new statement());
            return production;
        }
    }
    
    public class declaration_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new local_variable_declaration(), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new local_constant_declaration(), new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class local_variable_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new local_variable_type(), new local_variable_declarators());
            return production;
        }
    }
    
    public class local_variable_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new type(), new ProjectX.Bnf.Terminal("var"));
            return production;
        }
    }
    
    public class local_variable_declarators : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new local_variable_declarator(), new ProjectX.Bnf.Sequence(new local_variable_declarators(), new ProjectX.Bnf.Terminal(","), new local_variable_declarator()));
            return production;
        }
    }
    
    public class local_variable_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new identifier(), new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("="), new local_variable_initializer()));
            return production;
        }
    }
    
    public class local_variable_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new expression(), new array_initializer());
            return production;
        }
    }
    
    public class local_constant_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("const"), new type(), new constant_declarators());
            return production;
        }
    }
    
    public class constant_declarators : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new constant_declarator(), new ProjectX.Bnf.Sequence(new constant_declarators(), new ProjectX.Bnf.Terminal(","), new constant_declarator()));
            return production;
        }
    }
    
    public class constant_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("="), new constant_expression());
            return production;
        }
    }
    
    public class expression_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new statement_expression(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class statement_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new invocation_expression(), new object_creation_expression(), new assignment(), new post_increment_expression(), new post_decrement_expression(), new pre_increment_expression(), new pre_decrement_expression());
            return production;
        }
    }
    
    public class selection_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new if_statement(), new switch_statement());
            return production;
        }
    }
    
    public class if_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("if"), new ProjectX.Bnf.Terminal("("), new boolean_expression(), new ProjectX.Bnf.Terminal(")"), new embedded_statement()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("if"), new ProjectX.Bnf.Terminal("("), new boolean_expression(), new ProjectX.Bnf.Terminal(")"), new embedded_statement(), new ProjectX.Bnf.Terminal("else"), new embedded_statement()));
            return production;
        }
    }
    
    public class switch_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("switch"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")"), new switch_block());
            return production;
        }
    }
    
    public class switch_block : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new switch_sections()), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class switch_sections : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new switch_section(), new ProjectX.Bnf.Sequence(new switch_sections(), new switch_section()));
            return production;
        }
    }
    
    public class switch_section : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new switch_labels(), new statement_list());
            return production;
        }
    }
    
    public class switch_labels : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new switch_label(), new ProjectX.Bnf.Sequence(new switch_labels(), new switch_label()));
            return production;
        }
    }
    
    public class switch_label : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("case"), new constant_expression(), new ProjectX.Bnf.Terminal(":")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("default"), new ProjectX.Bnf.Terminal(":")));
            return production;
        }
    }
    
    public class iteration_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new while_statement(), new do_statement(), new for_statement(), new foreach_statement());
            return production;
        }
    }
    
    public class while_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("while"), new ProjectX.Bnf.Terminal("("), new boolean_expression(), new ProjectX.Bnf.Terminal(")"), new embedded_statement());
            return production;
        }
    }
    
    public class do_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("do"), new embedded_statement(), new ProjectX.Bnf.Terminal("while"), new ProjectX.Bnf.Terminal("("), new boolean_expression(), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class for_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("for"), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new for_initializer()), new ProjectX.Bnf.Terminal(";"), new ProjectX.Bnf.Optional(new for_condition()), new ProjectX.Bnf.Terminal(";"), new ProjectX.Bnf.Optional(new for_iterator()), new ProjectX.Bnf.Terminal(")"), new embedded_statement());
            return production;
        }
    }
    
    public class for_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new local_variable_declaration(), new statement_expression_list());
            return production;
        }
    }
    
    public class for_condition : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new boolean_expression();
            return production;
        }
    }
    
    public class for_iterator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new statement_expression_list();
            return production;
        }
    }
    
    public class statement_expression_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new statement_expression(), new ProjectX.Bnf.Sequence(new statement_expression_list(), new ProjectX.Bnf.Terminal(","), new statement_expression()));
            return production;
        }
    }
    
    public class foreach_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("foreach"), new ProjectX.Bnf.Terminal("("), new local_variable_type(), new identifier(), new ProjectX.Bnf.Terminal("in"), new expression(), new ProjectX.Bnf.Terminal(")"), new embedded_statement());
            return production;
        }
    }
    
    public class jump_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new break_statement(), new continue_statement(), new goto_statement(), new return_statement(), new throw_statement());
            return production;
        }
    }
    
    public class break_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("break"), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class continue_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("continue"), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class goto_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("goto"), new identifier(), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("goto"), new ProjectX.Bnf.Terminal("case"), new constant_expression(), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("goto"), new ProjectX.Bnf.Terminal("default"), new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class return_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("return"), new ProjectX.Bnf.Optional(new expression()), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class throw_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("throw"), new ProjectX.Bnf.Optional(new expression()), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class try_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("try"), new block(), new catch_clauses()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("try"), new block(), new finally_clause()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("try"), new block(), new catch_clauses(), new finally_clause()));
            return production;
        }
    }
    
    public class catch_clauses : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new specific_catch_clauses(), new ProjectX.Bnf.Optional(new general_catch_clause())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new specific_catch_clauses()), new general_catch_clause()));
            return production;
        }
    }
    
    public class specific_catch_clauses : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new specific_catch_clause(), new ProjectX.Bnf.Sequence(new specific_catch_clauses(), new specific_catch_clause()));
            return production;
        }
    }
    
    public class specific_catch_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("catch"), new ProjectX.Bnf.Terminal("("), new class_type(), new ProjectX.Bnf.Optional(new identifier()), new ProjectX.Bnf.Terminal(")"), new block());
            return production;
        }
    }
    
    public class general_catch_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("catch"), new block());
            return production;
        }
    }
    
    public class finally_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("finally"), new block());
            return production;
        }
    }
    
    public class checked_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("checked"), new block());
            return production;
        }
    }
    
    public class unchecked_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("unchecked"), new block());
            return production;
        }
    }
    
    public class lock_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("lock"), new ProjectX.Bnf.Terminal("("), new expression(), new ProjectX.Bnf.Terminal(")"), new embedded_statement());
            return production;
        }
    }
    
    public class using_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("using"), new ProjectX.Bnf.Terminal("("), new resource_acquisition(), new ProjectX.Bnf.Terminal(")"), new embedded_statement());
            return production;
        }
    }
    
    public class resource_acquisition : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new local_variable_declaration(), new expression());
            return production;
        }
    }
    
    public class yield_statement : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("yield"), new ProjectX.Bnf.Terminal("return"), new expression(), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("yield"), new ProjectX.Bnf.Terminal("break"), new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class compilation_unit : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new extern_alias_directives()), new ProjectX.Bnf.Optional(new using_directives()), new ProjectX.Bnf.Optional(new global_attributes())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new namespace_member_declarations())));
            return production;
        }
    }
    
    public class namespace_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("namespace"), new qualified_identifier(), new namespace_body(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class qualified_identifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new identifier(), new ProjectX.Bnf.Sequence(new qualified_identifier(), new ProjectX.Bnf.Terminal("."), new identifier()));
            return production;
        }
    }
    
    public class namespace_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new extern_alias_directives()), new ProjectX.Bnf.Optional(new using_directives()), new ProjectX.Bnf.Optional(new namespace_member_declarations()), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class extern_alias_directives : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new extern_alias_directive(), new ProjectX.Bnf.Sequence(new extern_alias_directives(), new extern_alias_directive()));
            return production;
        }
    }
    
    public class extern_alias_directive : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("extern"), new ProjectX.Bnf.Terminal("alias"), new identifier(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class using_directives : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new using_directive(), new ProjectX.Bnf.Sequence(new using_directives(), new using_directive()));
            return production;
        }
    }
    
    public class using_directive : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new using_alias_directive(), new using_namespace_directive());
            return production;
        }
    }
    
    public class using_alias_directive : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("using"), new identifier(), new ProjectX.Bnf.Terminal("="), new namespace_or_type_name(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class using_namespace_directive : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("using"), new namespace_name(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class namespace_member_declarations : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new namespace_member_declaration(), new ProjectX.Bnf.Sequence(new namespace_member_declarations(), new namespace_member_declaration()));
            return production;
        }
    }
    
    public class namespace_member_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new namespace_declaration(), new type_declaration());
            return production;
        }
    }
    
    public class type_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new class_declaration(), new struct_declaration(), new interface_declaration(), new enum_declaration(), new delegate_declaration());
            return production;
        }
    }
    
    public class qualified_alias_member : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("::"), new identifier(), new ProjectX.Bnf.Optional(new type_argument_list()));
            return production;
        }
    }
    
    public class class_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new class_modifiers()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("partial")), new ProjectX.Bnf.Terminal("class"), new identifier(), new ProjectX.Bnf.Optional(new type_parameter_list())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new class_base()), new ProjectX.Bnf.Optional(new type_parameter_constraints_clauses()), new class_body(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal(";"))));
            return production;
        }
    }
    
    public class class_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new class_modifier(), new ProjectX.Bnf.Sequence(new class_modifiers(), new class_modifier()));
            return production;
        }
    }
    
    public class class_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("abstract"), new ProjectX.Bnf.Terminal("sealed"), new ProjectX.Bnf.Terminal("static"));
            return production;
        }
    }
    
    public class type_parameter_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("<"), new type_parameters(), new ProjectX.Bnf.Terminal(">"));
            return production;
        }
    }
    
    public class type_parameters : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new type_parameter()), new ProjectX.Bnf.Sequence(new type_parameters(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Optional(new attributes()), new type_parameter()));
            return production;
        }
    }
    
    public class class_base : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new class_type()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new interface_type_list()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new class_type(), new ProjectX.Bnf.Terminal(","), new interface_type_list()));
            return production;
        }
    }
    
    public class interface_type_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new interface_type(), new ProjectX.Bnf.Sequence(new interface_type_list(), new ProjectX.Bnf.Terminal(","), new interface_type()));
            return production;
        }
    }
    
    public class type_parameter_constraints_clauses : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new type_parameter_constraints_clause(), new ProjectX.Bnf.Sequence(new type_parameter_constraints_clauses(), new type_parameter_constraints_clause()));
            return production;
        }
    }
    
    public class type_parameter_constraints_clause : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("where"), new type_parameter(), new ProjectX.Bnf.Terminal(":"), new type_parameter_constraints());
            return production;
        }
    }
    
    public class type_parameter_constraints : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new primary_constraint(), new secondary_constraints(), new constructor_constraint(), new ProjectX.Bnf.Sequence(new primary_constraint(), new ProjectX.Bnf.Terminal(","), new secondary_constraints()), new ProjectX.Bnf.Sequence(new primary_constraint(), new ProjectX.Bnf.Terminal(","), new constructor_constraint()), new ProjectX.Bnf.Sequence(new secondary_constraints(), new ProjectX.Bnf.Terminal(","), new constructor_constraint()), new ProjectX.Bnf.Sequence(new primary_constraint(), new ProjectX.Bnf.Terminal(","), new secondary_constraints(), new ProjectX.Bnf.Terminal(","), new constructor_constraint()));
            return production;
        }
    }
    
    public class primary_constraint : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new class_type(), new ProjectX.Bnf.Terminal("class"), new ProjectX.Bnf.Terminal("struct"));
            return production;
        }
    }
    
    public class secondary_constraints : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new interface_type(), new type_parameter(), new ProjectX.Bnf.Sequence(new secondary_constraints(), new ProjectX.Bnf.Terminal(","), new interface_type()), new ProjectX.Bnf.Sequence(new secondary_constraints(), new ProjectX.Bnf.Terminal(","), new type_parameter()));
            return production;
        }
    }
    
    public class constructor_constraint : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class class_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new class_member_declarations()), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class class_member_declarations : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new class_member_declaration(), new ProjectX.Bnf.Sequence(new class_member_declarations(), new class_member_declaration()));
            return production;
        }
    }
    
    public class class_member_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new constant_declaration(), new field_declaration(), new method_declaration(), new property_declaration(), new event_declaration(), new indexer_declaration(), new operator_declaration(), new constructor_declaration(), new destructor_declaration(), new static_constructor_declaration(), new type_declaration());
            return production;
        }
    }
    
    public class constant_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new constant_modifiers()), new ProjectX.Bnf.Terminal("const"), new type(), new constant_declarators(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class constant_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new constant_modifier(), new ProjectX.Bnf.Sequence(new constant_modifiers(), new constant_modifier()));
            return production;
        }
    }
    
    public class constant_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"));
            return production;
        }
    }
    
    public class field_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new field_modifiers()), new type(), new variable_declarators(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class field_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new field_modifier(), new ProjectX.Bnf.Sequence(new field_modifiers(), new field_modifier()));
            return production;
        }
    }
    
    public class field_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Terminal("readonly"), new ProjectX.Bnf.Terminal("volatile"));
            return production;
        }
    }
    
    public class variable_declarators : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new variable_declarator(), new ProjectX.Bnf.Sequence(new variable_declarators(), new ProjectX.Bnf.Terminal(","), new variable_declarator()));
            return production;
        }
    }
    
    public class variable_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new identifier(), new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("="), new variable_initializer()));
            return production;
        }
    }
    
    public class variable_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new expression(), new array_initializer());
            return production;
        }
    }
    
    public class method_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new method_header(), new method_body());
            return production;
        }
    }
    
    public class method_header : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new method_modifiers()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("partial")), new return_type(), new member_name(), new ProjectX.Bnf.Optional(new type_parameter_list())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new formal_parameter_list()), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new type_parameter_constraints_clauses())));
            return production;
        }
    }
    
    public class method_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new method_modifier(), new ProjectX.Bnf.Sequence(new method_modifiers(), new method_modifier()));
            return production;
        }
    }
    
    public class method_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Terminal("virtual"), new ProjectX.Bnf.Terminal("sealed"), new ProjectX.Bnf.Terminal("override"), new ProjectX.Bnf.Terminal("abstract"), new ProjectX.Bnf.Terminal("extern"));
            return production;
        }
    }
    
    public class return_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new type(), new ProjectX.Bnf.Terminal("void"));
            return production;
        }
    }
    
    public class member_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new identifier(), new ProjectX.Bnf.Sequence(new interface_type(), new ProjectX.Bnf.Terminal("."), new identifier()));
            return production;
        }
    }
    
    public class method_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new block(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class formal_parameter_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new fixed_parameters(), new ProjectX.Bnf.Sequence(new fixed_parameters(), new ProjectX.Bnf.Terminal(","), new parameter_array()), new parameter_array());
            return production;
        }
    }
    
    public class fixed_parameters : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new fixed_parameter(), new ProjectX.Bnf.Sequence(new fixed_parameters(), new ProjectX.Bnf.Terminal(","), new fixed_parameter()));
            return production;
        }
    }
    
    public class fixed_parameter : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new parameter_modifier()), new type(), new identifier(), new ProjectX.Bnf.Optional(new default_argument()));
            return production;
        }
    }
    
    public class default_argument : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("="), new expression());
            return production;
        }
    }
    
    public class parameter_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("ref"), new ProjectX.Bnf.Terminal("out"), new ProjectX.Bnf.Terminal("this"));
            return production;
        }
    }
    
    public class parameter_array : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("params"), new array_type(), new identifier());
            return production;
        }
    }
    
    public class property_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new property_modifiers()), new type(), new member_name(), new ProjectX.Bnf.Terminal("{"), new accessor_declarations(), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class property_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new property_modifier(), new ProjectX.Bnf.Sequence(new property_modifiers(), new property_modifier()));
            return production;
        }
    }
    
    public class property_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Terminal("virtual"), new ProjectX.Bnf.Terminal("sealed"), new ProjectX.Bnf.Terminal("override"), new ProjectX.Bnf.Terminal("abstract"), new ProjectX.Bnf.Terminal("extern"));
            return production;
        }
    }
    
    public class accessor_declarations : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new get_accessor_declaration(), new ProjectX.Bnf.Optional(new set_accessor_declaration())), new ProjectX.Bnf.Sequence(new set_accessor_declaration(), new ProjectX.Bnf.Optional(new get_accessor_declaration())));
            return production;
        }
    }
    
    public class get_accessor_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new accessor_modifier()), new ProjectX.Bnf.Terminal("get"), new accessor_body());
            return production;
        }
    }
    
    public class set_accessor_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new accessor_modifier()), new ProjectX.Bnf.Terminal("set"), new accessor_body());
            return production;
        }
    }
    
    public class accessor_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("protected")));
            return production;
        }
    }
    
    public class accessor_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new block(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class event_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new event_modifiers()), new ProjectX.Bnf.Terminal("event"), new type(), new variable_declarators(), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new event_modifiers()), new ProjectX.Bnf.Terminal("event"), new type(), new member_name(), new ProjectX.Bnf.Terminal("{"), new event_accessor_declarations(), new ProjectX.Bnf.Terminal("}")));
            return production;
        }
    }
    
    public class event_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new event_modifier(), new ProjectX.Bnf.Sequence(new event_modifiers(), new event_modifier()));
            return production;
        }
    }
    
    public class event_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Terminal("virtual"), new ProjectX.Bnf.Terminal("sealed"), new ProjectX.Bnf.Terminal("override"), new ProjectX.Bnf.Terminal("abstract"), new ProjectX.Bnf.Terminal("extern"));
            return production;
        }
    }
    
    public class event_accessor_declarations : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new add_accessor_declaration(), new remove_accessor_declaration()), new ProjectX.Bnf.Sequence(new remove_accessor_declaration(), new add_accessor_declaration()));
            return production;
        }
    }
    
    public class add_accessor_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("add"), new block());
            return production;
        }
    }
    
    public class remove_accessor_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("remove"), new block());
            return production;
        }
    }
    
    public class indexer_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new indexer_modifiers()), new indexer_declarator(), new ProjectX.Bnf.Terminal("{"), new accessor_declarations(), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class indexer_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new indexer_modifier(), new ProjectX.Bnf.Sequence(new indexer_modifiers(), new indexer_modifier()));
            return production;
        }
    }
    
    public class indexer_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("virtual"), new ProjectX.Bnf.Terminal("sealed"), new ProjectX.Bnf.Terminal("override"), new ProjectX.Bnf.Terminal("abstract"), new ProjectX.Bnf.Terminal("extern"));
            return production;
        }
    }
    
    public class indexer_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new type(), new ProjectX.Bnf.Terminal("this"), new ProjectX.Bnf.Terminal("["), new formal_parameter_list(), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new type(), new interface_type(), new ProjectX.Bnf.Terminal("."), new ProjectX.Bnf.Terminal("this"), new ProjectX.Bnf.Terminal("["), new formal_parameter_list(), new ProjectX.Bnf.Terminal("]")));
            return production;
        }
    }
    
    public class operator_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new operator_modifiers(), new operator_declarator(), new operator_body());
            return production;
        }
    }
    
    public class operator_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new operator_modifier(), new ProjectX.Bnf.Sequence(new operator_modifiers(), new operator_modifier()));
            return production;
        }
    }
    
    public class operator_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Terminal("extern"));
            return production;
        }
    }
    
    public class operator_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new unary_operator_declarator(), new binary_operator_declarator(), new conversion_operator_declarator());
            return production;
        }
    }
    
    public class unary_operator_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new type(), new ProjectX.Bnf.Terminal("operator"), new overloadable_unary_operator(), new ProjectX.Bnf.Terminal("("), new type(), new identifier(), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class overloadable_unary_operator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("+"), new ProjectX.Bnf.Terminal("_"), new ProjectX.Bnf.Terminal("!"), new ProjectX.Bnf.Terminal("~"), new ProjectX.Bnf.Terminal("++"), new ProjectX.Bnf.Terminal("__"), new ProjectX.Bnf.Terminal("true"), new ProjectX.Bnf.Terminal("false"));
            return production;
        }
    }
    
    public class binary_operator_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new type(), new ProjectX.Bnf.Terminal("operator"), new overloadable_binary_operator(), new ProjectX.Bnf.Terminal("("), new type(), new identifier(), new ProjectX.Bnf.Terminal(","), new type(), new identifier(), new ProjectX.Bnf.Terminal(")"));
            return production;
        }
    }
    
    public class overloadable_binary_operator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("+"), new ProjectX.Bnf.Terminal("_"), new ProjectX.Bnf.Terminal("*"), new ProjectX.Bnf.Terminal("/"), new ProjectX.Bnf.Terminal("%"), new ProjectX.Bnf.Terminal("&"), new ProjectX.Bnf.Terminal("|"), new ProjectX.Bnf.Terminal("^"), new ProjectX.Bnf.Terminal("<<"), new right_shift(), new ProjectX.Bnf.Terminal("=="), new ProjectX.Bnf.Terminal("!="), new ProjectX.Bnf.Terminal(">"), new ProjectX.Bnf.Terminal("<"), new ProjectX.Bnf.Terminal(">="), new ProjectX.Bnf.Terminal("<="));
            return production;
        }
    }
    
    public class conversion_operator_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("implicit"), new ProjectX.Bnf.Terminal("operator"), new type(), new ProjectX.Bnf.Terminal("("), new type(), new identifier(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("explicit"), new ProjectX.Bnf.Terminal("operator"), new type(), new ProjectX.Bnf.Terminal("("), new type(), new identifier(), new ProjectX.Bnf.Terminal(")")));
            return production;
        }
    }
    
    public class operator_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new block(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class constructor_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new constructor_modifiers()), new constructor_declarator(), new constructor_body());
            return production;
        }
    }
    
    public class constructor_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new constructor_modifier(), new ProjectX.Bnf.Sequence(new constructor_modifiers(), new constructor_modifier()));
            return production;
        }
    }
    
    public class constructor_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("extern"));
            return production;
        }
    }
    
    public class constructor_declarator : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new formal_parameter_list()), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new constructor_initializer()));
            return production;
        }
    }
    
    public class constructor_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new ProjectX.Bnf.Terminal("base"), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new argument_list()), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new ProjectX.Bnf.Terminal("this"), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new argument_list()), new ProjectX.Bnf.Terminal(")")));
            return production;
        }
    }
    
    public class constructor_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new block(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class static_constructor_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new static_constructor_modifiers(), new identifier(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Terminal(")"), new static_constructor_body());
            return production;
        }
    }
    
    public class static_constructor_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("extern")), new ProjectX.Bnf.Terminal("static")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("extern"))));
            return production;
        }
    }
    
    public class static_constructor_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new block(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class destructor_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("extern")), new ProjectX.Bnf.Terminal("~"), new identifier(), new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Terminal(")"), new destructor_body());
            return production;
        }
    }
    
    public class destructor_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new block(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class struct_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new struct_modifiers()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("partial")), new ProjectX.Bnf.Terminal("struct"), new identifier(), new ProjectX.Bnf.Optional(new type_parameter_list())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new struct_interfaces()), new ProjectX.Bnf.Optional(new type_parameter_constraints_clauses()), new struct_body(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal(";"))));
            return production;
        }
    }
    
    public class struct_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new struct_modifier(), new ProjectX.Bnf.Sequence(new struct_modifiers(), new struct_modifier()));
            return production;
        }
    }
    
    public class struct_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"));
            return production;
        }
    }
    
    public class struct_interfaces : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new interface_type_list());
            return production;
        }
    }
    
    public class struct_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new struct_member_declarations()), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class struct_member_declarations : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new struct_member_declaration(), new ProjectX.Bnf.Sequence(new struct_member_declarations(), new struct_member_declaration()));
            return production;
        }
    }
    
    public class struct_member_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new constant_declaration(), new field_declaration(), new method_declaration(), new property_declaration(), new event_declaration(), new indexer_declaration(), new operator_declaration(), new constructor_declaration(), new static_constructor_declaration(), new type_declaration());
            return production;
        }
    }
    
    public class array_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new non_array_type(), new rank_specifiers());
            return production;
        }
    }
    
    public class non_array_type : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new type();
            return production;
        }
    }
    
    public class array_initializer : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new variable_initializer_list()), new ProjectX.Bnf.Terminal("}")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new variable_initializer_list(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("}")));
            return production;
        }
    }
    
    public class variable_initializer_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new variable_initializer(), new ProjectX.Bnf.Sequence(new variable_initializer_list(), new ProjectX.Bnf.Terminal(","), new variable_initializer()));
            return production;
        }
    }
    
    public class interface_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new interface_modifiers()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("partial")), new ProjectX.Bnf.Terminal("interface")), new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Optional(new variant_type_parameter_list()), new ProjectX.Bnf.Optional(new interface_base())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new type_parameter_constraints_clauses()), new interface_body(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal(";"))));
            return production;
        }
    }
    
    public class interface_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new interface_modifier(), new ProjectX.Bnf.Sequence(new interface_modifiers(), new interface_modifier()));
            return production;
        }
    }
    
    public class interface_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"));
            return production;
        }
    }
    
    public class variant_type_parameter_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("<"), new variant_type_parameters(), new ProjectX.Bnf.Terminal(">"));
            return production;
        }
    }
    
    public class variant_type_parameters : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new variance_annotation()), new type_parameter()), new ProjectX.Bnf.Sequence(new variant_type_parameters(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new variance_annotation()), new type_parameter()));
            return production;
        }
    }
    
    public class variance_annotation : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("in"), new ProjectX.Bnf.Terminal("out"));
            return production;
        }
    }
    
    public class interface_base : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new interface_type_list());
            return production;
        }
    }
    
    public class interface_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new interface_member_declarations()), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class interface_member_declarations : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new interface_member_declaration(), new ProjectX.Bnf.Sequence(new interface_member_declarations(), new interface_member_declaration()));
            return production;
        }
    }
    
    public class interface_member_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new interface_method_declaration(), new interface_property_declaration(), new interface_event_declaration(), new interface_indexer_declaration());
            return production;
        }
    }
    
    public class interface_method_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("new")), new return_type(), new identifier(), new type_parameter_list()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new formal_parameter_list()), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new type_parameter_constraints_clauses()), new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class interface_property_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("new")), new type(), new identifier(), new ProjectX.Bnf.Terminal("{"), new interface_accessors(), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class interface_accessors : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("get"), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("set"), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("get"), new ProjectX.Bnf.Terminal(";"), new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("set"), new ProjectX.Bnf.Terminal(";")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("set"), new ProjectX.Bnf.Terminal(";"), new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Terminal("get"), new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class interface_event_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("new")), new ProjectX.Bnf.Terminal("event"), new type(), new identifier(), new ProjectX.Bnf.Terminal(";"));
            return production;
        }
    }
    
    public class interface_indexer_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal("new")), new type(), new ProjectX.Bnf.Terminal("this"), new ProjectX.Bnf.Terminal("["), new formal_parameter_list(), new ProjectX.Bnf.Terminal("]"), new ProjectX.Bnf.Terminal("{"), new interface_accessors(), new ProjectX.Bnf.Terminal("}"));
            return production;
        }
    }
    
    public class enum_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new enum_modifiers()), new ProjectX.Bnf.Terminal("enum"), new identifier(), new ProjectX.Bnf.Optional(new enum_base()), new enum_body(), new ProjectX.Bnf.Optional(new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class enum_base : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal(":"), new integral_type());
            return production;
        }
    }
    
    public class enum_body : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new ProjectX.Bnf.Optional(new enum_member_declarations()), new ProjectX.Bnf.Terminal("}")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("{"), new enum_member_declarations(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("}")));
            return production;
        }
    }
    
    public class enum_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new enum_modifier(), new ProjectX.Bnf.Sequence(new enum_modifiers(), new enum_modifier()));
            return production;
        }
    }
    
    public class enum_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"));
            return production;
        }
    }
    
    public class enum_member_declarations : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new enum_member_declaration(), new ProjectX.Bnf.Sequence(new enum_member_declarations(), new ProjectX.Bnf.Terminal(","), new enum_member_declaration()));
            return production;
        }
    }
    
    public class enum_member_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new identifier()), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new identifier(), new ProjectX.Bnf.Terminal("="), new constant_expression()));
            return production;
        }
    }
    
    public class delegate_declaration : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new attributes()), new ProjectX.Bnf.Optional(new delegate_modifiers()), new ProjectX.Bnf.Terminal("delegate"), new return_type()), new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Optional(new variant_type_parameter_list())), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new formal_parameter_list()), new ProjectX.Bnf.Terminal(")"), new ProjectX.Bnf.Optional(new type_parameter_constraints_clauses()), new ProjectX.Bnf.Terminal(";")));
            return production;
        }
    }
    
    public class delegate_modifiers : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new delegate_modifier(), new ProjectX.Bnf.Sequence(new delegate_modifiers(), new delegate_modifier()));
            return production;
        }
    }
    
    public class delegate_modifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("private"));
            return production;
        }
    }
    
    public class global_attributes : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new global_attribute_sections();
            return production;
        }
    }
    
    public class global_attribute_sections : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new global_attribute_section(), new ProjectX.Bnf.Sequence(new global_attribute_sections(), new global_attribute_section()));
            return production;
        }
    }
    
    public class global_attribute_section : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("["), new global_attribute_target_specifier(), new attribute_list(), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("["), new global_attribute_target_specifier(), new attribute_list(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("]")));
            return production;
        }
    }
    
    public class global_attribute_target_specifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new global_attribute_target(), new ProjectX.Bnf.Terminal(":"));
            return production;
        }
    }
    
    public class global_attribute_target : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("assembly"), new ProjectX.Bnf.Terminal("module"));
            return production;
        }
    }
    
    public class attributes : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new attribute_sections();
            return production;
        }
    }
    
    public class attribute_sections : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new attribute_section(), new ProjectX.Bnf.Sequence(new attribute_sections(), new attribute_section()));
            return production;
        }
    }
    
    public class attribute_section : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Optional(new attribute_target_specifier()), new attribute_list(), new ProjectX.Bnf.Terminal("]")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("["), new ProjectX.Bnf.Optional(new attribute_target_specifier()), new attribute_list(), new ProjectX.Bnf.Terminal(","), new ProjectX.Bnf.Terminal("]")));
            return production;
        }
    }
    
    public class attribute_target_specifier : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new attribute_target(), new ProjectX.Bnf.Terminal(":"));
            return production;
        }
    }
    
    public class attribute_target : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("field"), new ProjectX.Bnf.Terminal("event"), new ProjectX.Bnf.Terminal("method"), new ProjectX.Bnf.Terminal("param"), new ProjectX.Bnf.Terminal("property"), new ProjectX.Bnf.Terminal("return"), new type());
            return production;
        }
    }
    
    public class attribute_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new attribute(), new ProjectX.Bnf.Sequence(new attribute_list(), new ProjectX.Bnf.Terminal(","), new attribute()));
            return production;
        }
    }
    
    public class attribute : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new attribute_name(), new ProjectX.Bnf.Optional(new attribute_arguments()));
            return production;
        }
    }
    
    public class attribute_name : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new type_name();
            return production;
        }
    }
    
    public class attribute_arguments : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new ProjectX.Bnf.Optional(new positional_argument_list()), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new positional_argument_list(), new ProjectX.Bnf.Terminal(","), new named_argument_list(), new ProjectX.Bnf.Terminal(")")), new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Terminal("("), new named_argument_list(), new ProjectX.Bnf.Terminal(")")));
            return production;
        }
    }
    
    public class positional_argument_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new positional_argument(), new ProjectX.Bnf.Sequence(new positional_argument_list(), new ProjectX.Bnf.Terminal(","), new positional_argument()));
            return production;
        }
    }
    
    public class positional_argument : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new ProjectX.Bnf.Optional(new argument_name()), new attribute_argument_expression());
            return production;
        }
    }
    
    public class named_argument_list : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new named_argument(), new ProjectX.Bnf.Sequence(new named_argument_list(), new ProjectX.Bnf.Terminal(","), new named_argument()));
            return production;
        }
    }
    
    public class named_argument : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Sequence(new identifier(), new ProjectX.Bnf.Terminal("="), new attribute_argument_expression());
            return production;
        }
    }
    
    public class attribute_argument_expression : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new expression();
            return production;
        }
    }
    
    public class keyword : ProjectX.Bnf.Production {
        
        public override ProjectX.Bnf.Production GetProduction() {
            ProjectX.Bnf.Production production;
            production = new ProjectX.Bnf.Choice(new ProjectX.Bnf.Terminal("abstract"), new ProjectX.Bnf.Terminal("as"), new ProjectX.Bnf.Terminal("base"), new ProjectX.Bnf.Terminal("bool"), new ProjectX.Bnf.Terminal("break"), new ProjectX.Bnf.Terminal("byte"), new ProjectX.Bnf.Terminal("case"), new ProjectX.Bnf.Terminal("catch"), new ProjectX.Bnf.Terminal("char"), new ProjectX.Bnf.Terminal("checked"), new ProjectX.Bnf.Terminal("class"), new ProjectX.Bnf.Terminal("const"), new ProjectX.Bnf.Terminal("continue"), new ProjectX.Bnf.Terminal("decimal"), new ProjectX.Bnf.Terminal("default"), new ProjectX.Bnf.Terminal("delegate"), new ProjectX.Bnf.Terminal("do"), new ProjectX.Bnf.Terminal("double"), new ProjectX.Bnf.Terminal("else"), new ProjectX.Bnf.Terminal("enum"), new ProjectX.Bnf.Terminal("event"), new ProjectX.Bnf.Terminal("explicit"), new ProjectX.Bnf.Terminal("extern"), new ProjectX.Bnf.Terminal("false"), new ProjectX.Bnf.Terminal("finally"), new ProjectX.Bnf.Terminal("fixed"), new ProjectX.Bnf.Terminal("float"), new ProjectX.Bnf.Terminal("for"), new ProjectX.Bnf.Terminal("foreach"), new ProjectX.Bnf.Terminal("goto"), new ProjectX.Bnf.Terminal("if"), new ProjectX.Bnf.Terminal("implicit"), new ProjectX.Bnf.Terminal("in"), new ProjectX.Bnf.Terminal("int"), new ProjectX.Bnf.Terminal("interface"), new ProjectX.Bnf.Terminal("internal"), new ProjectX.Bnf.Terminal("is"), new ProjectX.Bnf.Terminal("lock"), new ProjectX.Bnf.Terminal("long"), new ProjectX.Bnf.Terminal("namespace"), new ProjectX.Bnf.Terminal("new"), new ProjectX.Bnf.Terminal("null"), new ProjectX.Bnf.Terminal("object"), new ProjectX.Bnf.Terminal("operator"), new ProjectX.Bnf.Terminal("out"), new ProjectX.Bnf.Terminal("override"), new ProjectX.Bnf.Terminal("params"), new ProjectX.Bnf.Terminal("private"), new ProjectX.Bnf.Terminal("protected"), new ProjectX.Bnf.Terminal("public"), new ProjectX.Bnf.Terminal("readonly"), new ProjectX.Bnf.Terminal("ref"), new ProjectX.Bnf.Terminal("return"), new ProjectX.Bnf.Terminal("sbyte"), new ProjectX.Bnf.Terminal("sealed"), new ProjectX.Bnf.Terminal("short"), new ProjectX.Bnf.Terminal("sizeof"), new ProjectX.Bnf.Terminal("stackalloc"), new ProjectX.Bnf.Terminal("static"), new ProjectX.Bnf.Terminal("string"), new ProjectX.Bnf.Terminal("struct"), new ProjectX.Bnf.Terminal("switch"), new ProjectX.Bnf.Terminal("this"), new ProjectX.Bnf.Terminal("throw"), new ProjectX.Bnf.Terminal("true"), new ProjectX.Bnf.Terminal("try"), new ProjectX.Bnf.Terminal("typeof"), new ProjectX.Bnf.Terminal("uint"), new ProjectX.Bnf.Terminal("ulong"), new ProjectX.Bnf.Terminal("unchecked"), new ProjectX.Bnf.Terminal("unsafe"), new ProjectX.Bnf.Terminal("ushort"), new ProjectX.Bnf.Terminal("using"), new ProjectX.Bnf.Terminal("virtual"), new ProjectX.Bnf.Terminal("void"), new ProjectX.Bnf.Terminal("volatile"), new ProjectX.Bnf.Terminal("while"), new ProjectX.Bnf.Terminal("group"), new ProjectX.Bnf.Terminal("by"), new ProjectX.Bnf.Terminal("join"), new ProjectX.Bnf.Terminal("on"), new ProjectX.Bnf.Terminal("equals"), new ProjectX.Bnf.Terminal("into"), new ProjectX.Bnf.Terminal("let"), new ProjectX.Bnf.Terminal("get"), new ProjectX.Bnf.Terminal("set"), new ProjectX.Bnf.Terminal("yield"), new ProjectX.Bnf.Terminal("partial"), new ProjectX.Bnf.Terminal("var"), new ProjectX.Bnf.Terminal("orderby"), new ProjectX.Bnf.Terminal("add"), new ProjectX.Bnf.Terminal("remove"), new ProjectX.Bnf.Terminal("where"), new ProjectX.Bnf.Terminal("from"), new ProjectX.Bnf.Terminal("select"), new ProjectX.Bnf.Terminal("ascending"), new ProjectX.Bnf.Terminal("descending"), new ProjectX.Bnf.Terminal("alias"), new ProjectX.Bnf.Terminal("field"), new ProjectX.Bnf.Terminal("method"), new ProjectX.Bnf.Terminal("param"), new ProjectX.Bnf.Terminal("property"), new ProjectX.Bnf.Terminal("dynamic"), new ProjectX.Bnf.Terminal("assembly"), new ProjectX.Bnf.Terminal("module"));
            return production;
        }
    }
}
